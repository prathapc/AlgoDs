<h3>Bitwise operations</h3>
More here https://leetcode.com/discuss/interview-question/3695233/All-Types-of-Patterns-for-Bits-Manipulations-and-How-to-use-it
```
& => both true
| => either or both true
~ => negation
^ => either true
left shift << => multiplied by 2 / yields double[x << y is x*2^y  ex1: 6<<1 is 6*2  ex2: 6<<3 is 6*2 pow(3)]
right shift >> => divide by half / yields half [x >> y is x/2^y  ex1: 6>>1 is 6/2^1]

logical right shift >>> => will always put a 0 in the left most bit, while >> will put a 1 or a 0 depending on what the sign of it is.
```
int a = -1020; <br />
a = a >> 1; // division <br />
System.out.println(a); <br />
// Prints -510. Great! <br />
int b = -1021; <br />
b = b >> 1; <br />
System.out.println(b); <br />
// Prints -511. Ugghh.

The solution is to add 1 before doing the bit-shift on a negative number.
This way, it'll be "correct" regardless of whether the number was odd or even.

int a = -1020; <br />
a = (a + 1) >> 1; <br />
System.out.println(a); <br />
// Prints -510. Great! <br />
int b = -1021; <br />
b = (b + 1) >> 1; <br />
System.out.println(b); <br />
// Prints -510. Yay! <br />
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tricks:-
1. if num is even
    if x & 1 == 0 then x is even

2. to uppercase/lowercase
    xor with 32 (c ^ 32)

3. Find the element in an array that is not repeated.
    do xor of all elements in array

4. Get First Set Bit
   we first check if the rightmost significant bit is the set bit using bit & 1.
   If not, we keep shifting left and checking until we find the bit that makes our AND operation yield 1

5. Count set bits
    Similar to above, find all set bits in given number. num & 1 gives 1 if right most bit is 1, then
    we right shift to check other positions. BTW rightshift by one is division by 2.
    while (n > 0) {
        count += n & 1;
        n >>= 1;
    }

short notes:-
Set union A | B
Set intersection A & B
Set subtraction A & ~B
Set negation ALL_BITS ^ A or ~A
Set bit A |= 1 << bit
Clear bit A &= ~(1 << bit)
Test bit (A & 1 << bit) != 0
Extract last bit A&-A or A&~(A-1) or x^(x&(x-1))
Remove last bit A&(A-1)
Get all 1-bits ~0


How to represent -ve number?
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Typically -ve integer gets stored in 2's compliment form. That means very first bit is used to
represent the sign. 0 means +ve and 1 means -ve. remaining bits filled with 2's compliment

Ex1: (~(450)+1) gives -450

Ex2: 18 and -18

18 -> 00010010

find ~ of the number

  11101101

add +1 for the outcome

  1101110

so -18 => 11101110
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

left and right shift:

+ve number right shift -> add 0 to the left most and remove right most bit

-ve number left shift ->  add 1 to the left most and remove right most bit

left shift has effect of multipying number by 2 and right shift of dividing number by 2 with some truncation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Bit masking:
Masking means to keep/change/remove a desired part of information.
